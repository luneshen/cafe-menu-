from tkinter import *
from tkinter import messagebox

def main():
    global root
    root = Tk()
    root.title("Login")
    root.geometry("150x100")

    btnaddaccount = Button(root, text="Sign in", command=check_account)
    btnaddaccount.grid(row=0, column=0)

    btnsrchaccount = Button(root, text="Sign up", command=add_account)
    btnsrchaccount.grid(row=1, column=0)

    btnexit = Button(root, text="3. Exit", command=close_window)
    btnexit.grid(row=2, column=0)

def check_account():
    global checking_account_window
    checking_account_window = Toplevel(root)
    checking_account_window.title("Sign in")
    checking_account_window.geometry("300x150")

    account_label = Label(checking_account_window, text="Enter account name:")
    account_label.grid(row=0, column=0)
    account_entry = Entry(checking_account_window)
    account_entry.grid(row=0, column=1)

    password_label = Label(checking_account_window, text="Enter password:")
    password_label.grid(row=1, column=0)
    password_entry = Entry(checking_account_window, show="*")
    password_entry.grid(row=1, column=1)

    checking_button = Button(checking_account_window, text="Done",
                             command=lambda: checking_password(account_entry.get(), password_entry.get()))
    checking_button.grid(row=2, column=0)

    search_button = Button(checking_account_window, text="Forget password", command=search_account)
    search_button.grid(row=2, column=1)

    def checking_password(username, password):
        with open("passwords.txt", "r") as f:
            for line in f:
                fields = line.strip().split(":")
                if len(fields) == 2 and fields[0] == username and fields[1] == password:
                    messagebox.showinfo("Success", "Login successful!")
                    cafe_menu()
                    checking_account_window.destroy()
                    break
            else:
                messagebox.showerror("Error", "Invalid username or password!")

def add_account():
    global add_account_window
    add_account_window = Toplevel(root)
    add_account_window.title("Sign up")
    add_account_window.geometry("300x150")

    account_label = Label(add_account_window, text="Enter account name: ")
    account_label.grid(row=0, column=0)
    account_entry = Entry(add_account_window)
    account_entry.grid(row=0, column=1)

    password_label = Label(add_account_window, text="Enter password: ")
    password_label.grid(row=1, column=0)
    password_entry = Entry(add_account_window, show="*")
    password_entry.grid(row=1, column=1)

    def save_account():
        account = account_entry.get()
        password = password_entry.get()
        with open("passwords.txt", "a") as f:
            f.write(f"{account}:{password}\n")
        add_account_window.destroy()
        messagebox.showinfo("Success", "Welcome!")

    save_button = Button(add_account_window, text="Done", command=save_account)
    save_button.grid(row=2, column=1)

def search_account():
    global search_account_window
    search_account_window = Toplevel(root)
    search_account_window.title("Search Account")
    search_account_window.geometry("400x150")

    account_label = Label(search_account_window, text="Enter account name: ")
    account_label.grid(row=0, column=0)
    account_entry = Entry(search_account_window)
    account_entry.grid(row=0, column=1)

    password_label = Label(search_account_window, text="Password:")
    password_label.grid(row=1, column=0)
    password_entry = Entry(search_account_window, state="readonly")
    password_entry.grid(row=1, column=1)

    def find_password():
        account = account_entry.get()
        with open("passwords.txt", "r") as f:
            for line in f:
                acc, password = line.strip().split(":")
                if acc == account:
                    password_entry.configure(state="normal")
                    password_entry.delete(0, END)
                    password_entry.insert(END, password)
                    password_entry.configure(state="readonly")
                    break

    search_button = Button(search_account_window, text="Search", command=find_password)
    search_button.grid(row=2, column=1)

def cafe_menu():
    global cafe_menu_window, selected_items

    cafe_menu_window = Toplevel(root)
    cafe_menu_window.title("Menu")
    cafe_menu_window.geometry("250x400")

    menu = {
        "1. Matcha Latte": 7.00,
        "2. Latte": 5.00,
        "3. Hot Chocolate": 6.00,
        "4. Macaron": 3.00,
        "5. Cup Cake": 2.00,
        "6. Swiss Roll": 8.00
    }

    menu_frame = Frame(cafe_menu_window)
    menu_frame.pack(fill=BOTH, expand=True)

    scrollbar = Scrollbar(menu_frame)
    scrollbar.pack(side=RIGHT, fill=Y)

    menu_listbox = Listbox(menu_frame, yscrollcommand=scrollbar.set)
    menu_listbox.pack(fill=BOTH, expand=True)

    scrollbar.config(command=menu_listbox.yview)

    for item, price in menu.items():
        menu_listbox.insert(END, f"{item}: ${price:.2f}")

    selected_items = []

    total_label = Label(cafe_menu_window, text="Total: $0.00")
    total_label.pack()

    add_to_cart_label = Label(cafe_menu_window, text="Items you have chosen: []")
    add_to_cart_label.pack()

    def calculate_total():
        total = sum([menu[item.split(':')[0].strip()] for item in selected_items])
        total_label.config(text=f"Total: ${total:.2f}")

    def add_to_cart():
        selection = menu_listbox.curselection()
        if selection:
            item = menu_listbox.get(selection)
            selected_items.append(item)
            add_to_cart_label.config(text=f"Items in cart: {selected_items}")
            calculate_total()

    add_to_cart_button = Button(cafe_menu_window, text="Add to Cart", command=add_to_cart)
    add_to_cart_button.pack()

def close_window():
    root.destroy()

if __name__ == '__main__':
    main()

root.mainloop()