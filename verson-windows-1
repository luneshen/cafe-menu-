from tkinter import *

def main():
    root = Tk()
    root.title("Login")
    root.geometry("150x150")

    def check_credentials():
        # Open the "passwords.txt" file and read the credentials
        with open("passwords.txt", "r") as f:
            lines = f.readlines()
            credentials = [line.strip().split(":") for line in lines]

        # Get the entered username and password from the Entry variable
        entered_username = username_entry.get()
        entered_password = password_entry.get()

        # Check if the entered credentials match any of the credentials from the file
        for username, password in credentials:
            if entered_username == username and entered_password == password:
                show_menu()
                return

        # If no matching credentials are found, display an error message
        error_label.config(text="Invalid username or password")

    # Create the username label and entry widget
    username_label = Label(root, text="Username:")
    username_label.grid(row=0, column=0)

    username_entry = Entry(root)
    username_entry.grid(row=0, column=1)

    # Create the password label and entry widget
    password_label = Label(root, text="Password:")
    password_label.grid(row=1, column=0)

    password_entry = Entry(root, show="*")
    password_entry.grid(row=1, column=1)

    # Create the error label for displaying error messages
    error_label = Label(root, text="")
    error_label.grid(row=2, column=0, columnspan=2)

    # Create the login button with the check_credentials() function as the command
    login_button = Button(root, text="Login", command=check_credentials)
    login_button.grid(row=3, column=0, columnspan=2)

    def show_menu():
        menu = {
            "1. Matcha Latte": 7.00,
            "2. Latte": 5.00,
            "3. Hot Chocolate": 6.00,
            "4. Macaron": 3.00,
            "5. Cup Cake": 2.00,
            "6. Swiss Roll": 8.00
        }

        def calculate_total():
            # Get the indices of the selected items in the listbox
            selected_indices = listbox.curselection()
            # Calculate the total price based on the selected items
            total = sum([menu[listbox.get(index)] for index in selected_indices])
            # Update the total label with the calculated total price
            total_label.config(text=f"Total: ${total:.2f}")

        # Create a new window for the menu
        menu_window = Toplevel(root)
        menu_window.title("Menu")

        # Create a scrollbar for the listbox
        scrollbar = Scrollbar(menu_window)
        scrollbar.pack(side=LEFT, fill=Y)

        # Create a listbox to display the menu items
        listbox = Listbox(menu_window, selectmode=MULTIPLE, yscrollcommand=scrollbar.set)
        for item in menu:
            listbox.insert(END, item)
        listbox.pack(side=LEFT, fill=BOTH)

        scrollbar.config(command=listbox.yview)

        # Create a button to calculate the total price
        calculate_total_button = Button(menu_window, text="Calculate Total", command=calculate_total)
        calculate_total_button.pack()

        # Create a label to display the total price
        total_label = Label(menu_window, text="")
        total_label.pack()

    root.mainloop()

main()
